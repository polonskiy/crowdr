#!/bin/bash

[[ -n "$CROWDR_TRACE" || -n "$CROWDR_DRY" ]] && set -x
if [[ ! -n "$CROWDR_CFG" ]]; then
    if [[ -d ".crowdr" ]]; then
        CROWDR_CFG=".crowdr/config.sh"
    else
        CROWDR_CFG="crowdr.cfg.sh"
    fi
fi
CROWDR_DIR="$(dirname $CROWDR_CFG)"
CROWDR_HOOKDIR="$CROWDR_DIR/hooks"
if [[ -n "$CROWDR_DRY" ]]; then
    CROWDR_EVAL='echo'
else
    CROWDR_EVAL='eval'
fi
declare -A crowdr_opts_run
declare -A crowdr_opts_build
declare -A crowdr_opts_image
declare -A crowdr_opts_command
declare -A crowdr_opts_hook
crowdr_list=""

trap exit INT

crowdr_fullname() {
    printf $name_format $project $1
}

crowdr_run_hook(){
    local container="$1"
    local hook="$2"
    [[ -n ${crowdr_opts_hook["${container}~$hook"]} ]] && ${crowdr_opts_hook["${container}~$hook"]}
}

crowdr_command_version() {
    echo "0.9.1"
}

crowdr_command_build() {
    for c in $crowdr_list; do
        if [[ -n "${crowdr_opts_build[$c]}" ]]; then
            crowdr_run_hook $c before.build
            $CROWDR_EVAL docker build -t $c ${crowdr_opts_build[$c]} || exit
            crowdr_run_hook $c after.build
        fi
    done
}

crowdr_command_run() {
    #delete existent containers
    $CROWDR_EVAL docker inspect \
        --type=container \
        --format='{{.Name}}' \
        $(tac <<< "$crowdr_list") \
        2> /dev/null \
        | sed 's|^/||' \
        | xargs --no-run-if-empty docker rm -f > /dev/null
    for c in $crowdr_list; do
        crowdr_run_hook $c before.run
        image=$c
        [[ -n "${crowdr_opts_image[$c]}" ]] && image="${crowdr_opts_image[$c]}"
        $CROWDR_EVAL docker run -d -t --name $c ${crowdr_opts_run[$c]} "$image" ${crowdr_opts_command[$c]} > /dev/null && echo $c
        crowdr_run_hook $c after.run
    done
}

crowdr_command_start() {
    $CROWDR_EVAL docker start $crowdr_list
}

crowdr_command_stop() {
    $CROWDR_EVAL docker stop $(tac <<< "$crowdr_list")
}

crowdr_command_stats() {
    $CROWDR_EVAL docker stats $crowdr_list
}

crowdr_command_ps() {
    local out="$($CROWDR_EVAL docker ps)"
    local list=""
    echo "$(head -1 <<< "$out")"
    list="$(awk -v regex="$project" '$NF ~ regex' <<< "$out")"
    [[ -n "$list" ]] && echo "$list"
}

crowdr_command_ip() {
    local ip=""
    local running=""
    for c in $crowdr_list; do
        running=$($CROWDR_EVAL docker inspect --format '{{.State.Running}}' $c)
        ip=$($CROWDR_EVAL docker inspect --format '{{ .NetworkSettings.IPAddress }}' $c)
        [[ "$running" == "false" ]] && ip=""
        printf '%-30s %-30s\n' $c "$ip"
    done
}

crowdr_command_shell() {
    $CROWDR_EVAL docker exec -it $(crowdr_fullname $1) bash
}

crowdr_command_exec() {
    local name="$1"
    shift
    $CROWDR_EVAL docker exec -it $(crowdr_fullname $name) "$@"
}

crowdr_command_pipe() {
    local name="$1"
    shift
    $CROWDR_EVAL docker exec -i $(crowdr_fullname $name) "$@"
}

crowdr_command_restart() {
    echo "Stopping..."
    $CROWDR_EVAL docker stop $(tac <<< "$crowdr_list")
    echo
    echo "Starting..."
    $CROWDR_EVAL docker start $crowdr_list
}

crowdr_command_kill() {
    $CROWDR_EVAL docker kill $(tac <<< "$crowdr_list")
}

crowdr_command_rm() {
    $CROWDR_EVAL docker rm $(tac <<< "$crowdr_list")
}

crowdr_command_rmi() {
    local image=""
    for c in $crowdr_list; do
        crowdr_run_hook $c before.rmi
        image=$c
        [[ -n "${crowdr_opts_image[$c]}" ]] && image="${crowdr_opts_image[$c]}"
        $CROWDR_EVAL docker rmi "${image}"
        crowdr_run_hook $c after.rmi
    done
}

crowdr_parse_cfg() {
    local container=""
    local option=""
    local value=""
    local link=""
    local alias=""
    local hook_name=""
    local hook_script=""
    local names=()
    source $CROWDR_CFG
    while read container option value; do
        container="$(crowdr_fullname $container)"
        names+=("$container")
        case $option in
            command)
                crowdr_opts_command[$container]=$value
                continue
                ;;
            image)
                crowdr_opts_image[$container]=$value
                continue
                ;;
            build)
                crowdr_opts_build[$container]=$value
                continue
                ;;
            link)
                link="${value%%:*}"
                link="$(crowdr_fullname $link)"
                alias="${value##*:}"
                value="$link:$alias"
                ;;
            after.*|before.*)
                crowdr_opts_hook["$container~$option"]="$value"
                continue
                ;;
        esac
        crowdr_opts_run[$container]+=" --$option=$value"
    done < <(grep -vP '^#|^\S*$' <<< "$config")
    crowdr_list="$(printf '%s\n' "${names[@]}" | uniq )"
}

cmd="${1:-run}"
shift
crowdr_parse_cfg
[[ -f $CROWDR_HOOKDIR/$cmd.before ]] && source $CROWDR_HOOKDIR/$cmd.before
crowdr_command_$cmd "$@"
[[ -f $CROWDR_HOOKDIR/$cmd.after ]] && source $CROWDR_HOOKDIR/$cmd.after
exit 0
